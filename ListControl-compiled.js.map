{"version":3,"sources":["ListControl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA,OAAO,UAAS,OAAT,EAAkB;AACrB,UACI,EAAC,CAAD,EAAI,SAAJ,KAAiB,QAAQ,QAAR,CADrB;AAAA,UAEI,eAAe,QAAQ,wBAAR,CAFnB;;AAIA,UAAM,IAAN,SAAmB,SAAnB,CAA6B;AACzB,eAAO,KAAP,EAAc,KAAd,EAAqB;AACjB,mBACI;AAAA;AAAA;AACK,sBAAM,IAAN,CAAW,GAAX,CAAe,QACd;AAAA;AAAA;AAAK,yBAAK;AAAV,iBADD;AADL,aADJ;AAOH;AATwB;;AAY7B,UAAM,WAAN,SAA0B,YAA1B,CAAuC;AACnC;;;;;;AAMA,oBAAa,QAAQ,EAArB,EAAyB,UAAzB,EAAqC;AACjC,kBAAM,IAAN,EAAY,KAAZ,EAAmB,UAAnB;AACA,iBAAK,aAAL,GAAqB,aAArB;AACH;AAVkC;;AAavC,WAAO,WAAP;AACH,CA/BD","file":"ListControl-compiled.js","sourcesContent":["// This is the simplest example possible. I'm currently just using WebStorm's\n// file-watchers to compile this but you could get the same effect (I think)\n// with `babel ListControl.js > ListControl-compiled.js`.\ndefine(function(require) {\n    const\n        {h, Component} = require('preact'),\n        ReactControl = require('common/ui/ReactControl');\n\n    class List extends Component {\n        render(props, state) {\n            return (\n                <ul>\n                    {props.data.map(item => (\n                      <li>{item.text}</li>\n                    ))}\n                </ul>\n            )\n        }\n    }\n\n    class ListControl extends ReactControl {\n        /**\n         * Constructs a Control instance\n         *\n         * @param {Object} attrs                    An object literal defining the attributes of the control.\n         * @param {boolean} [autoRender=true]       Indicates whether the control renders automatically after construction if it has a valid HTMLElement instance to replace.\n         */\n        constructor (attrs = {}, autoRender) {\n            super(List, attrs, autoRender);\n            this.ocControlName = 'ListControl';\n        }\n    }\n\n    return ListControl;\n});\n"]}